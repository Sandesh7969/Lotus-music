import { EventEmitter } from 'events';
import { CreatePlayerOptions, KazagumoEvents, KazagumoOptions as KazagumoOptionsOwO, KazagumoSearchOptions, KazagumoSearchResult } from './Modules/Interfaces';
import { Node, NodeOption, Shoukaku, ShoukakuOptions, Connector } from 'shoukaku';
import { KazagumoPlayer } from './Managers/KazagumoPlayer';
import { Snowflake } from 'discord.js';
export declare class Kazagumo extends EventEmitter {
    KazagumoOptions: KazagumoOptionsOwO;
    /** Shoukaku instance */
    shoukaku: Shoukaku;
    /** Kazagumo players */
    readonly players: Map<string, KazagumoPlayer>;
    /**
     * Initialize a Kazagumo instance.
     * @param KazagumoOptions KazagumoOptions
     * @param connector Connector
     * @param nodes NodeOption[]
     * @param options ShoukakuOptions
     */
    constructor(KazagumoOptions: KazagumoOptionsOwO, connector: Connector, nodes: NodeOption[], options?: ShoukakuOptions);
    on<K extends keyof KazagumoEvents>(event: K, listener: (...args: KazagumoEvents[K]) => void): this;
    once<K extends keyof KazagumoEvents>(event: K, listener: (...args: KazagumoEvents[K]) => void): this;
    off<K extends keyof KazagumoEvents>(event: K, listener: (...args: KazagumoEvents[K]) => void): this;
    emit<K extends keyof KazagumoEvents>(event: K, ...data: KazagumoEvents[K]): boolean;
    /**
     * Create a player.
     * @param options CreatePlayerOptions
     * @returns Promise<KazagumoPlayer>
     */
    createPlayer<T extends KazagumoPlayer>(options: CreatePlayerOptions): Promise<T | KazagumoPlayer>;
    /**
     * Get a player by guildId.
     * @param guildId Guild ID
     * @returns KazagumoPlayer | undefined
     */
    getPlayer<T extends KazagumoPlayer>(guildId: Snowflake): (T | KazagumoPlayer) | undefined;
    /**
     * Destroy a player.
     * @param guildId Guild ID
     * @returns void
     */
    destroyPlayer<T extends KazagumoPlayer>(guildId: Snowflake): void;
    /**
     * Get a least used node.
     * @returns Node
     */
    getLeastUsedNode(): Node;
    /**
     * Search a track by query or uri.
     * @param query Query
     * @param options KazagumoOptions
     * @returns Promise<KazagumoSearchResult>
     */
    search(query: string, options?: KazagumoSearchOptions): Promise<KazagumoSearchResult>;
    private buildSearch;
}
