"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.KazagumoError = exports.KazagumoPlugin = exports.PlayerState = exports.State = exports.SupportedSources = exports.SearchResultTypes = exports.PlayerMovedState = exports.Events = exports.SourceIDs = exports.escapeRegExp = void 0;
const escapeRegExp = (str) => str.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
exports.escapeRegExp = escapeRegExp;
exports.SourceIDs = {
    youtube: 'yt',
    youtube_music: 'ytm',
    soundcloud: 'sc',
};
var Events;
(function (Events) {
    Events["PlayerDestroy"] = "playerDestroy";
    Events["PlayerCreate"] = "playerCreate";
    Events["PlayerStart"] = "playerStart";
    Events["PlayerEnd"] = "playerEnd";
    Events["PlayerEmpty"] = "playerEmpty";
    Events["PlayerClosed"] = "playerClosed";
    Events["PlayerUpdate"] = "playerUpdate";
    Events["PlayerException"] = "playerException";
    Events["PlayerError"] = "playerError";
    Events["PlayerResumed"] = "playerResumed";
    Events["PlayerStuck"] = "playerStuck";
    Events["PlayerResolveError"] = "playerResolveError";
    Events["PlayerMoved"] = "playerMoved";
    Events["Debug"] = "debug";
})(Events = exports.Events || (exports.Events = {}));
var PlayerMovedState;
(function (PlayerMovedState) {
    PlayerMovedState["Unknown"] = "UNKNOWN";
    PlayerMovedState["Joined"] = "JOINED";
    PlayerMovedState["Left"] = "LEFT";
    PlayerMovedState["Moved"] = "MOVED";
})(PlayerMovedState = exports.PlayerMovedState || (exports.PlayerMovedState = {}));
var SearchResultTypes;
(function (SearchResultTypes) {
    SearchResultTypes["Playlist"] = "PLAYLIST";
    SearchResultTypes["Track"] = "TRACK";
    SearchResultTypes["Search"] = "SEARCH";
})(SearchResultTypes = exports.SearchResultTypes || (exports.SearchResultTypes = {}));
exports.SupportedSources = [
    'bandcamp',
    'beam',
    'getyarn',
    'http',
    'local',
    'nico',
    'soundcloud',
    'stream',
    'twitch',
    'vimeo',
    'youtube',
];
var State;
(function (State) {
    State[State["CONNECTING"] = 0] = "CONNECTING";
    State[State["CONNECTED"] = 1] = "CONNECTED";
    State[State["DISCONNECTING"] = 2] = "DISCONNECTING";
    State[State["DISCONNECTED"] = 3] = "DISCONNECTED";
})(State = exports.State || (exports.State = {}));
var PlayerState;
(function (PlayerState) {
    PlayerState[PlayerState["CONNECTING"] = 0] = "CONNECTING";
    PlayerState[PlayerState["CONNECTED"] = 1] = "CONNECTED";
    PlayerState[PlayerState["DISCONNECTING"] = 2] = "DISCONNECTING";
    PlayerState[PlayerState["DISCONNECTED"] = 3] = "DISCONNECTED";
    PlayerState[PlayerState["DESTROYING"] = 4] = "DESTROYING";
    PlayerState[PlayerState["DESTROYED"] = 5] = "DESTROYED";
})(PlayerState = exports.PlayerState || (exports.PlayerState = {}));
class KazagumoPlugin {
    load(kazagumo) {
        throw new KazagumoError(1, 'Plugin must implement load()');
    }
    unload(kazagumo) {
        throw new KazagumoError(1, 'Plugin must implement unload()');
    }
}
exports.KazagumoPlugin = KazagumoPlugin;
/* tslint:disable:max-classes-per-file */
class KazagumoError extends Error {
    constructor(code, message) {
        super(message);
        this.code = code;
        this.message = message;
    }
}
exports.KazagumoError = KazagumoError;
